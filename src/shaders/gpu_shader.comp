#version 430

// Structures
struct Camera {
    vec3 Position;
    float aspectRatio;

    vec3 Front;
	float padding2;

    vec3 Up;
    float padding3;

    vec3 Right;
    float padding4;

    float fov;
    vec3 padding5;
};

struct Light {
    vec3 position;
    float padding1;

    vec3 color;
    float padding2;
};

struct Material {
    vec3 color;
    float fresnelStrength;

    float ambientStrength;
    float diffuseStrength;
    float specularStrength;
    int shininess;
};

struct Shape {
    int type; // 0 for Sphere, 1 for Plane, 2 for Wall, 3 for Triangle
    vec3 padding;

    Material material;

    vec3 sphereCenter; 
    float sphereRadius;

    vec3 planeNormal;  
    float planeD;

    vec3 wallStart;
    float wallWidth;

    float wallHeight;
	vec3 padding1;

    vec3 triP1;
    float padding2;
    vec3 triP2;
    float padding3;
    vec3 triP3;
    float padding4;
};
vec3 getNormalFromShape(Shape shape, vec3 point){
    if (shape.type == 0){
        return normalize(point - shape.sphereCenter);
    }
    else if (shape.type == 1 || shape.type == 2 || shape.type == 3){
       return shape.planeNormal; 
    }
};

// BVH
struct Node{
    vec3 boundsMin;
    float padding1;

    vec3 boundsMax;
    float padding2;
    
    int leftChild;
	int rightChild;

    int startShapeIdx; // idx of the first shape in shapeIndices
    int numShapes;
};

// Ray
struct Ray{
    vec3 start;
    vec3 dir;
};

// Intersection
const uint NONE = 0;
const uint INNER = 1;
const uint OUTER = 2;
struct Intersection{
    uint intersect_type;
    vec3 hit_point;
    vec3 hit_normal;
    Material hit_material;
};


///////////////////////////////////////////////////////////////////////////////////
// Inputs
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(std430, binding = 1) buffer LightBuffer{
    Light light;
};
layout(std430, binding = 2) buffer CameraBuffer{
    Camera camera;
};
layout(std430, binding = 3) buffer ShapesBuffer{
    Shape shapes[];
};
layout(std430, binding = 4) buffer BVHBuffer{
    Node bvhNodes[];
};
layout(std430, binding = 5) buffer IndicesBuffer{
    int bvhIndices[];
};

uniform vec2 screenRes;
uniform int maxBounces;
uniform bool useBVH;
uniform bool useFresnel;
uniform bool useMollerTrumbore;

///////////////////////////////////////////////////////////////////////////////////
// Functions
vec3 getPointFromRay(Ray ray, float t){
    return ray.start + t*ray.dir;
};
float getTFromPointAndRay(Ray ray, vec3 point) {
    vec3 diff = point - ray.start;
    vec3 invDir = 1.0 / ray.dir; // Inverse of direction to avoid division by zero

    // Compute t for each axis
    float tx = diff.x * invDir.x;
    float ty = diff.y * invDir.y;
    float tz = diff.z * invDir.z;

    // Check consistency: all t values should be approximately equal
    if (abs(tx - ty) > 1e-5 || abs(tx - tz) > 1e-5) {
        // If not consistent, the point doesn't lie exactly on the ray
        return -1.0; // Return -1 or some invalid value
    }

    // Return any valid t (e.g., tx)
    return tx;
}
Ray getRay(Camera cam, float ndcX, float ndcY){
    float imagePlaneHeight = 2. * tan(radians(cam.fov/2.));
    float imagePlaneWidth = imagePlaneHeight * cam.aspectRatio;

    vec3 imagePlanePoint = cam.Position + cam.Front + (ndcX * imagePlaneWidth / 2.0f) * cam.Right + (ndcY * imagePlaneHeight / 2.0f) * cam.Up;

    vec3 rayDir = normalize(imagePlanePoint - cam.Position);

    Ray ray;
    ray.start = cam.Position;
    ray.dir = rayDir;

    return ray;
};

Intersection getIntersectionTriangle_MollerTrumbore(Shape shape, Ray ray){
    Intersection intersection;
    intersection.intersect_type = NONE;
    vec3 edge1 = shape.triP2 - shape.triP1;
    vec3 edge2 = shape.triP3 - shape.triP1;
    vec3 h = cross(ray.dir, edge2);
    float a = dot(edge1,h);

    if (abs(a) < 1e-5) return intersection;
    float f = 1.0/a;
    vec3 s = ray.start - shape.triP1;
    float u = f*dot(s,h);
    if (u<0 || u>1) return intersection;

    vec3 q = cross(s, edge1);
    float v = f*dot(ray.dir, q);
    if (v<0 || u+v>1) return intersection;

    float t = f*dot(edge2,q);
    if (t>0){
        intersection.intersect_type = INNER;
        intersection.hit_point = getPointFromRay(ray, t);
    }

    return intersection;
};
Intersection getIntersectionTriangle_Barycentric(Shape shape, Ray ray){
        Intersection intersection;
        intersection.intersect_type = NONE;
        
        // Base intersection with plane
        float np = dot(shape.planeNormal, ray.dir);
        if (np == 0) return intersection;

        float t = -(shape.planeD + dot(shape.planeNormal, ray.start)) / np;
        if (t > 0){
            intersection.intersect_type = (np > 0) ? INNER : OUTER;
            intersection.hit_point = getPointFromRay(ray, t);
            // If OUTER, return. Change in case of refractions
            if (np <= 0) return intersection; 
        }
        else {
            return intersection;
        }

        vec3 hitPoint = intersection.hit_point;

        // Compute vectors for edges and point-to-vertex
        vec3 edge1 = shape.triP2 - shape.triP1;
        vec3 edge2 = shape.triP3 - shape.triP1;
        vec3 toPoint = hitPoint - shape.triP1;

        // Barycentric coordinates
        float d00 = dot(edge1, edge1);
        float d01 = dot(edge1, edge2);
        float d11 = dot(edge2, edge2);
        float d20 = dot(toPoint, edge1);
        float d21 = dot(toPoint, edge2);
        
        float denom = d00 * d11 - d01 * d01;
        float v = (d11 * d20 - d01 * d21) / denom;
        float w = (d00 * d21 - d01 * d20) / denom;
        float u = 1.0 - v - w;

        // Check if the point lies inside the triangle
        if (u < 0 || v < 0 || w < 0) {
            intersection.intersect_type = NONE;
        }

        return intersection;
};

Intersection get_intersection(Shape shape, Ray ray){
    Intersection intersection;
    intersection.intersect_type = NONE;

    if (shape.type == 0){ // Sphere
        vec3 start = ray.start;
        vec3 dir = ray.dir;

        float aa = dot(dir,dir);
        float bb = 2 * (dot(dir, start-shape.sphereCenter));
        float cc = dot(start-shape.sphereCenter, start-shape.sphereCenter) - shape.sphereRadius * shape.sphereRadius;
        float D = bb * bb - 4 * aa * cc;
        
        if (D > 0){
            float sD = sqrt(D);
            float t1 = (-bb - sD) / (2 * aa);
            if (t1 > 0) {
                intersection.intersect_type = INNER;
                intersection.hit_point = getPointFromRay(ray, t1);
                return intersection;
            }
            float t2 = (-bb + sD) / (2 * aa);
            if (t2 > 0) {
                intersection.intersect_type = OUTER;
                // If OUTER, return. Change in case of refractions
                return intersection; 

            }
        }
    }
    else if (shape.type == 1){ // Plane
        float np = dot(shape.planeNormal, ray.dir);
        if (np == 0) return intersection;

        float t = -(shape.planeD + dot(shape.planeNormal, ray.start)) / np;
        if (t > 0){
            intersection.intersect_type = (np > 0) ? INNER : OUTER;
            // If OUTER, return. Change in case of refractions
            if (np <= 0) return intersection; 
            intersection.hit_point = getPointFromRay(ray, t);
        }
        else {
            return intersection;
        }
    }
    else if (shape.type == 2){ // Wall
        // Base intersection
        float np = dot(shape.planeNormal, ray.dir);
        if (np == 0) return intersection;

        float t = -(shape.planeD + dot(shape.planeNormal, ray.start)) / np;
        if (t > 0){
            intersection.intersect_type = (np > 0) ? INNER : OUTER;
            // If OUTER, return. Change in case of refractions
            if (np <= 0) return intersection; 
            intersection.hit_point = getPointFromRay(ray, t);
        }
        else {
            return intersection;
        }

        vec3 hitPoint = intersection.hit_point;

        vec3 u = normalize(cross(shape.planeNormal, vec3(0,1,0)));
        if (length(u) < 1e-5) u = normalize(cross(shape.planeNormal, vec3(1,0,0)));
        vec3 v = normalize(cross(shape.planeNormal, u));

        vec3 localPoint = hitPoint - shape.wallStart;
        float uProj = dot(localPoint, u);
        float vProj = dot(localPoint, v);

        if (uProj < 0 || uProj > shape.wallWidth || vProj < 0 || vProj > shape.wallHeight)
            intersection.intersect_type = NONE;

    }
    else if (shape.type == 3){ // Triangle

        if (useMollerTrumbore) {
            intersection = getIntersectionTriangle_MollerTrumbore(shape, ray);
        }
        else {
            intersection = getIntersectionTriangle_Barycentric(shape, ray);
        }
    }

    return intersection;
};

// Phong shading
vec3 phong(vec3 point, vec3 normal, vec3 viewDir, Light light, Material mat){
    // Material properties
	float ambientStrength = mat.ambientStrength;
	float diffuseStrength = mat.diffuseStrength;
	float specularStrength = mat.specularStrength;
	int shininess = mat.shininess;

    // Distance-based light attenuation
    float distToLight = distance(light.position, point);
    vec3 lightColor = light.color / (distToLight);

    // Ambient component
	vec3 ambient = ambientStrength * lightColor;

    // Diffuse component
	vec3 lightDir = normalize(light.position - point);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diffuseStrength * diff * lightColor;

    // Specular component
	vec3 specular = vec3(0);
	if (diff > 0.) {
		vec3 reflectDir = reflect(-lightDir, normal);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
		specular = specularStrength * spec * lightColor;
	}

    // Combine results
	vec3 result = (ambient + diffuse + specular) * mat.color;
	return result;
}; 

// BVH traversal
bool rayIntersectsAABB(Ray ray, vec3 boxMin, vec3 boxMax, out float tMin, out float tMax) {
    vec3 invDir = 1.0 / ray.dir;

    vec3 t0 = (boxMin - ray.start) * invDir;
    vec3 t1 = (boxMax - ray.start) * invDir;

    vec3 tMin3 = min(t0, t1);
    vec3 tMax3 = max(t0, t1);

    tMin = max(max(tMin3.x, tMin3.y), tMin3.z);
    tMax = min(min(tMax3.x, tMax3.y), tMax3.z);

    return tMax >= tMin && tMax > 0.0;
};


Intersection intersectScene2(Ray ray){
    Intersection intersection;
    intersection.intersect_type = NONE;

    int stack[64];
    int stackIdx = 0;
    stack[stackIdx++] = bvhNodes.length()-1;
    float closestDist = 1e20;


    while (stackIdx > 0){
        int nodeIdx = stack[--stackIdx];
        Node node = bvhNodes[nodeIdx];

        float tMin, tMax;
        if (!rayIntersectsAABB(ray, node.boundsMin, node.boundsMax, tMin, tMax)) {
            continue; // Skip node if ray misses bounding box
        }

        if (node.leftChild == -1){ // Leaf node (no need to check both children)
            bool hitSomething = false;

            // Closest intersection
            for (int i=0; i<node.numShapes; i++){
                int shapeIdx = bvhIndices[node.startShapeIdx + i];
                
                // Trace ray
                Intersection s_hit = get_intersection(shapes[shapeIdx], ray);
                if (s_hit.intersect_type == INNER){
            
                    float dist = distance(ray.start, s_hit.hit_point);
                    if (dist < closestDist) {
                        closestDist = dist;
                        hitSomething = true;

                        intersection = s_hit;
                        intersection.hit_normal = getNormalFromShape(shapes[shapeIdx], s_hit.hit_point);
                        intersection.hit_material = shapes[shapeIdx].material;
                    }
                }
            }
        }
        else{ // Go deeper
            // Push children
            stack[stackIdx++] = node.leftChild;
            stack[stackIdx++] = node.rightChild;
        } 
    }

    return intersection;
};

///////////////////////////////////////////////////////////////////////////////////
void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    vec3 bgColor = mix(vec3(0.05, 0.07, 0.1), vec3(0.5, 0.7, 1.0), texelCoord.y / screenRes.y); // Gradient  
    vec4 value = vec4(bgColor, 1.0); // background color

    // Get ray from camera
    Ray ray = getRay(
                camera, 
                2. * texelCoord.x / screenRes.x - 1, 
                1. - 2. * texelCoord.y / screenRes.y);
    

    if (useBVH){
        vec3 accumulatedColor = vec3(0);
        vec3 attenuation = vec3(1);

        for (int depth = 0; depth < maxBounces; ++depth){
            // Traverse BVH
            Intersection hit = intersectScene2(ray);

            if (hit.intersect_type != INNER){
                // Nothing hit, add background color
                accumulatedColor += attenuation * bgColor; // not necessary imo
                break;
            }
        
            // Use hit data
            vec3 hitPoint = hit.hit_point;
            vec3 hitNormal = hit.hit_normal;
            Material hitMaterial = hit.hit_material;
            vec3 hitColor = hit.hit_material.color;

            // Shadow ray
            bool inShadow = false;
            Ray shadowRay;
            shadowRay.start = hitPoint + hitNormal * 1e-3;
            shadowRay.dir = normalize(light.position - hitPoint);

            // Shadow check using BVH
            Intersection shadowHit = intersectScene2(shadowRay);
            if (shadowHit.intersect_type == INNER){
                 float lightDist = distance(light.position, hitPoint);
                    float hitDist = distance(shadowRay.start, shadowHit.hit_point);
                    if(hitDist < lightDist){
                        inShadow = true; 
                    }
            }

            // Compute color of the hitPoint
            vec3 phongColor = phong(
                                    hitPoint, 
                                    hitNormal, 
                                    ray.dir, 
                                    light, 
                                    hitMaterial);

            // If in shadow, make color darker
            if (inShadow) phongColor *= 0.3;

            accumulatedColor += attenuation * phongColor;

            if (hitMaterial.specularStrength > 0) {
                // Generate reflection ray
                vec3 reflectDir = reflect(ray.dir, hitNormal);
                ray.start = hitPoint + hitNormal * 1e-3; // Offset to avoid selfintersection
                ray.dir = reflectDir;
    
                if (useFresnel){
                    float fresnel = pow(1.0 - max(dot(-ray.dir, hitNormal), 0.0), 5.0);
                    fresnel = clamp(fresnel, 0.0, 0.8);
    
                    // Blend attenuation
                    float reflectionWeight = hitMaterial.fresnelStrength * fresnel;
                    float materialWeight = 1.0 - reflectionWeight;
    
                    attenuation *= mix(hitColor, vec3(1.0), reflectionWeight);
                    accumulatedColor += materialWeight * hitColor * phongColor;
                }
                else
                    attenuation *= hitMaterial.specularStrength;
                
            }
            else break;
        }

        value.xyz = accumulatedColor;
    }

    // No BVH
    else {
        vec3 accumulatedColor = vec3(0);
        vec3 attenuation = vec3(1);

        for (int depth=0; depth<maxBounces; ++depth){
            // Just high number, I dont want to divide by 0 to achieve infinity
            float closestDist = 1e20;

            bool hitSomething = false;
            vec3 hitColor = bgColor;
            Material hitMaterial;
            vec3 hitPoint;
            vec3 hitNormal;

            // Closest intersection
            for (int i=0; i<shapes.length(); ++i){
                // Trace ray
                Intersection s_hit = get_intersection(shapes[i], ray);
                if (s_hit.intersect_type == INNER){
            
                    float dist = distance(ray.start, s_hit.hit_point);
                    if (dist < closestDist) {
                        closestDist = dist;
                        hitSomething = true;

                        hitPoint = s_hit.hit_point;
                        hitNormal = getNormalFromShape(shapes[i], hitPoint);
                        hitMaterial = shapes[i].material;
                        hitColor = shapes[i].material.color;
                    }
                }
            }

            if (!hitSomething){
                // Nothing hit, add background color
                accumulatedColor += attenuation * bgColor; // not necessary imo
                break;
            }

            // Shadow ray
            bool inShadow = false;
            Ray shadowRay;
            shadowRay.start = hitPoint + hitNormal * 1e-5;
            shadowRay.dir = normalize(light.position - hitPoint);

            // Shadow check
            for (int i=0; i<shapes.length(); ++i){
                Intersection shadowHit = get_intersection(shapes[i], shadowRay);

                if (shadowHit.intersect_type == INNER) {
                    float lightDist = distance(light.position, hitPoint);
                    float hitDist = distance(shadowRay.start, shadowHit.hit_point);
                    if(hitDist < lightDist){
                        inShadow = true;
                        break;
                    }
                }
            }

            // Compute color of the hitPoint
            vec3 phongColor = phong(
                                    hitPoint, 
                                    hitNormal, 
                                    ray.dir, 
                                    light, 
                                    hitMaterial);
        
            // If in shadow, make color darker
            if (inShadow) phongColor *= 0.3;

            accumulatedColor += attenuation * phongColor;

            if (hitMaterial.specularStrength > 0) {
                // Generate reflection ray
                vec3 reflectDir = reflect(ray.dir, hitNormal);
                ray.start = hitPoint + hitNormal * 1e-3; // Offset to avoid selfintersection
                ray.dir = reflectDir;

                if (useFresnel){
                    float fresnel = pow(1.0 - max(dot(-ray.dir, hitNormal), 0.0), 5.0);
                    fresnel = clamp(fresnel, 0.0, 0.8);

                    // Blend attenuation
                    float reflectionWeight = hitMaterial.fresnelStrength * fresnel;
                    float materialWeight = 1.0 - reflectionWeight;

                    attenuation *= mix(hitColor, vec3(1.0), reflectionWeight);
                    accumulatedColor += materialWeight * hitColor * phongColor;
                }
                else
                    attenuation *= hitMaterial.specularStrength;
            
            }
            else break;
        }

        value.xyz = accumulatedColor;
    }
    

    imageStore(imgOutput, texelCoord, value);
}
