#version 430

// Structures
struct Camera {
    vec3 Position;
    float aspectRatio;

    vec3 Up;
    float padding2;

    vec3 Right;
    float padding3;

    float fov;
    vec3 padding4;
};

struct Light {
    vec3 position;
    float padding1;

    vec3 color;
    float padding2;
};

struct Material {
    float ambientStrength;
    float diffuseStrength;
    float specularStrength;
    int shininess;
};

struct Shape {
    int type; // 0 for Sphere, 1 for Plane
    vec3 color;

    Material material;

    vec3 sphereCenter; 
    float sphereRadius;

    vec3 planeNormal;  
    float planeD;
};



layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(std430, binding = 1) buffer LightBuffer{
    Light light;
};
layout(std430, binding = 2) buffer CameraBuffer{
    Camera camera;
};
layout(std430, binding = 3) buffer ShapesBuffer{
    Shape shapes[];
};

void main() {
    vec4 value = vec4(shapes[12].color, 1.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    imageStore(imgOutput, texelCoord, value);
}
